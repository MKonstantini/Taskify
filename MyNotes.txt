_________________________________


MY NOTES - LEARNING NEXT JS V.14

_________________________________


What is Next JS?
An Open-source React framework that enables developers to build server-rendered and statically generated web applications.
Allows for both Server Side Rendering and Static Site Generation.

Built-In Features:
- Routing: File based routing.
- API Routes: Create APIs.
- Rendering: Supports SSR and CSI .
- Data Fetching: simplified fetching using await in React Components.
- Styling: Supports CSS Modules (.module.css), Global Styles (styles/globals.css).
- Optimization: Optimizes images, fonts, scripts.

What is Vercel?
The Front-End Cloud Platform. Creators of Next JS. 
Offers a suite of tools to build, deploy, and manage modern web applications.
Hosts static sites and serverless functions, has a global CDN, is integrated with Git.

Command Line:
Create Next JS Project: `npx create-next-app@latest`
Init ShadCN: `npx shadcn-ui@latest init` (ShadCN = component library + tools for tailwind - inits: /components, /lib/utils.ts, /components.json)
Add ShadCN Component: `shadcn-ui@latest add button` (adds code for <Button> in components folder to be changed and imported)

React Component Types:
1. Client Component (RCC): 
    - Created using "use client" at the top of the component's file.
    - Cannot read or fetch data.
    - Can handle hooks and user interaction.
2. Server Component (RSC): 
    - The default type of components in Next JS. 
    - Can read and fetch data from a DB. 
    - Cannot handle hooks or user interaction. 

Special files (file name = functionality):
- page.tsx
- layout.tsx
- template.tsx
- not-found.tsx
- loading.tsx 
- error.tsx
Component Tree:
<Layout> => <Template> => <Error Boundary fallback={<Error />}> => <Suspense fallback={<Loading />}>
=> <Error Boundary fallback={<NotFound />}> => <Page/>.

_________________________________


Styling:
Create style.css with: @tailwind base; @tailwind components; @tailwind utilities;
Import style.css in components that require the styling.

Fonts:
For created .woff2 font files (locally placed font):
    1. Add new .woff2 font file into the public folder
    2. Import localFont from 'next/font/local'
    3. const *fontVarName* = localFont({src:"*path to created font file*"})
    4. import { cn } from '@/lib/utils' (ShadCN utils function for merging classes)
    5. <p className={cn("p-5 text-center", *fontVarName*)}></p>
For imported fonts (from external libraries):
    1. Import { Poppins } from 'next/font/google'
    2. const *fontVarName* = Poppins({subsets: ['latin'], weight: [100, 200, 300]})
    3. <p className={cn("p-5 text-center", *fontVarName*)}></p>

Metadata:
Define a page's metadata in layouts and/or pages for improved SEO.
Define statically: export const metadata : Metadata = { title : 'Home' }
Define dynamically: export const generateMetadata = ({params} : HomeParams) : Metadata => {
    return { title : params.id }
}

Layout:
page.tsx = UI that is unique to a route.
layout.tsx = UI that is shared between all pages in/under the the layout's directory.
In layout.tsx:
- Export const metadata = metadata which will be applied to the layout's children (improves SEO). 
- Create and exported JSX that will case all child elements.
- Child elements "children" are the effected pages, and are automatically set as props of layouts.
Create nested layouts via creating additional layout.tsx files within route folders.
Important to note when routing between elements with shared layout (children) - the layout does not unmount-remount.

Templates:
Exactly like layouts, except total unmounting-remounting does occur when routing between its children
(DOM elements are recreated, state is re-established, effects are re-synchronized).
Create a template.tsx file within a directory, receive children, export JSX (like in layouts).

Loading:
Create loading.tsx file, the exported JSX within will be displayed on content loading (specific to route segment).
All page files within the same directory as the loading.jsx will be subject to its exported JSX whenever loading.
This feature implements a React suspense boundary for the effected pages.
Since the layout is above the loading in the Component Tree - the loading page's layout will still be present and responsive!

Error Handling:
Create error.tsx file, like loading.tsx - the exported JSX will be displayed on error in pages sharing directory with this file.
Requires component to be set to "use client".
Here too the layout is above the error element in the Component Tree - the layout will still be present and responsive on page error.
Since the layout is not under the error, errors in the layout will not be covered. 
To handle layout erros, place error.tsx in the directory above the layout.
This feature implements a React error boundary for the effected pages.
Component can utilize received error props:
({ error, reset } : { error : Error; reset : () => void }) => {
    console.log(error.message) (string)
    onClick={reset} (invoke function to re-render the page - requires page to be set to "use client")
} 


_________________________________


Routing:
URL paths are defined by the files and folders in src/app.
Important to closely follow the Next JS conventions for creating routes:
- All routes must be placed inside the app folder.
- All folders correspond to a path segment in the URL, except for:
    1. private folders prefixed _ (_stats).
    2. route group folders in brackets ((auth)).
    3. layout props folders prefixed @ for parallel routes (@notification).
    !Note: For the root page - if no pages.tsx are found, Next JS will default to the folders above for a page to display.
- All route files must be named page.tsx. The exported JSX within this file will be displayed. Use export default for pages/layouts and export for components
- Create nested routes by creating folders inside of folders.
- Create dynamic routes (/:id) using [id] as folder name.
- All pages receive route params as intrinsic props - Component({params}) {params.id}.
- Can catch-all URL segments using folder name [...slug] - Component({params}) {params.slug[0]}.
- Adv. catch-all that includes parent folder: [[...slug]].
- 404 Not Found page is created automatically by Next JS.
- Create 404 Not Found page file in src/app/not-found.tsx (will replace the default Not Found).
- Use import { notFound } from 'next/navigation' - a function that routes the app to the nearest Not Found page.
page.tsx in app is the home page (localhost:3000).
page.tsx in app/about is the about page (localhost:3000/about).
Parallel Routing - Display of multiple pages within a layout in the same URL: 
    1. Create folders @something with page.tsx in a directory with layout.tsx (can also push subsequent folders + page in each @something).
    2. Destructure these @somethings as props in the layout ({children, something1, something2}).
    3. In the layout, create a returned JSX with the prop pages as variables.
    4. Create default.tsx files in the layout's directory and in each @somethings to act as a fallback when one @something pushes to the URL (/something/archived) so that the other @somethings will not crash (unmatched URL slots). 
Intercepting Routing - Display a intercepting page instead of the target page when using <Link href='/route to target'>:
    1. Create folder (.)*name of target page's folder* (referably in the same directory as the target folder).
    2. Create a page.tsx within the (.)x folder. This page will be displayed when routing to the target folder.
    - If the new (.)x folder folder is in the same directory as the target folder use a single dot (.) 
    - If the target folder is one directory above the intercepting folder use two dots: (..)x
    - If the target folder is in the app directory use three dots: (...)x 

Navigation:
! Naigational functionalities require components to be defined as client components. Insert "use client" at the top of the page.
- Import Link from 'next/link':
Use the <Link href=''> component (a React extension of the <a> component), imported from 'next/link'.
Can be used inside or within of other components: <h1><Link></Link></h1>.
- Import { usePathname } from 'next/navigation'.
Get a variable of the current active URL extension: const pathname = usePathname() (== '/about').
- Import { useRouter } from 'next/navigation' (functional router to be integrated within code).
const router = useRouter(), then:
    -> router.replace('/') to navigate to '/'.
    -> router.back()/router.forward().
    -> router.push(/about) 
- Alternatively, use import { redirect } from 'next/navigation' -> function execute: redirect('/api/auth/signin')

Route Handlers:
Create RESTful endpoints, for handling API requests (no need for a server). 
Route handlers run server-side, ensuring that sensitive info like private keys remain secure (never shipped to the browser).
Creating a GET request:
    1. In app, create folder *route name* (or folder [id] for /:id just like client routing).
    2. Create file route.ts in the created folder (note: .ts not .tsx). 
    3. Create CRUD operation function. Examples:
    - export async function GET() {
        return Response.json(comments, status: 200)
    }
    - export async function GET(_request: Request, { params }:{ params : { id : string }}) { <- prefixing _ means it will not be used
        const comment = comments.find( (comment) => comment.id === parseInt(params.id) )
        return Response.json(comment, status: 200)
    }
    - export async function POST(request: Request) {
        try {
            const userInput = await request.json()
            if (!userInput.text) {
                return new Response(JSON.stringify({ error: 'Missing comment text' }), status: 400 )
            }
            const newComment = {
                id: comments.length + 1,
                text: userInput.text,
            }
            comments.push(newComment)
            return Response.json(newComment, status: 201 );
        } catch (error) {
            console.error('Error creating comment:', error);
            return new Response(JSON.stringify({ error: 'Failed to create comment' }), status: 500 );
        }
    }
    - export async function PATCH(request: Request, {params}:{params:{id:string}}) {
        const userInput = await request.json()
        const index = comments.findIndex((comment) => comment.id === parseInt(params.id))
        comments[index].text = userInput.text

        return Response.json(comments[index], status: 201)
    }
    - export async function DELETE(_request: Request, {params}:{params:{id:string}}) {
        const index = comments.findIndex((comment) => comment.id === parseInt(params.id))
        const deletedComment = comments[index]
        comments.splice(index, 1)

        return Response.json(deletedComment, status: 200)
    }
    - export async function GET(request: NextRequest) { <- import { type NextRequest } from 'next/server'
        const searchParams = request.nextUrl.searchParams 
        // reads query of url: /comments?query=first
        const query = searchParams.get("query")

        if (!query) {
            redirect('/comments') <- import { redirect } from 'next/navigation'
        }
        const filteredComments = comments.filter((comment) => comment.text.includes(query))

        return Response.json(filteredComments, status: 200)
    }


_________________________________

CLIENT TO DB WORKFLOW [ OAuth -> Next Auth -> Prisma -> PostreSQL ]:

Next Auth:
Provides user authentication to store user information in the client-side session (session scoped).
Works with providers to receive user info, including: Google, GitHub, Facebook, Email/Password, and more.
Can be used with databases like MySQL or with token-based authentication (JWT) for session management.
    1. Install: `npm i next-auth`
    2. Create an OAuth App in GitHub (allowing next auth to access the logged in account's github info):
    For "Authorization callback URL" enter http://localhost:3000/api/auth/callback/github
    3. Copy the Client ID and Client Secret generated for the application to the application's .env file. 
    !WARNING: Do not publically upload this .env file, it can sabotage both your app and your github account.
    4. Inside /app, create: /api/auth/[...nextauth]/route.ts
    5. In the created route, code:
    import NextAuth from "next-auth";
    import GithubProvider from "next-auth/providers/github";
    export default NextAuth({
    // Configure one or more authentication providers
    providers: [
        GithubProvider({
        clientId: process.env.GITHUB_CLIENT_ID,
        clientSecret: process.env.GITHUB_CLIENT_SECRET,
        }),
    ],
    // Secret key used for signing and encrypting cookies and JWTs
    secret: process.env.NEXTAUTH_SECRET,
    // Check this process by opening: http://localhost:3000/api/auth/providers, http://localhost:3000/api/auth/signin  
    });
    6. In components folder, create: SessionProvider.tsx:
    "use client"
    import { SessionProvider } from 'next-auth/react'
    export default SessionProvider
    7. Provide the session data to the children in app layout:
    import SessionProvider from '../components/SessionProvider'
    import { getServerSession } from 'next-auth'
    export default async function RootLayout {
        const session = await getServerSession()
        return (
            <html lang="en">
            <body className={inter.className}>
                <SessionProvider session={session}>
                <main>
                    {children}
                </main>
                </SessionProvider>
            </body>
            </html>
        )
    }
    !Note async await.
    8. For pages with login/register/logout features:
        - import { signIn, signOut } from "next-auth/react"
        - <Button onClick={() => signIn("github")}>Sign in with Github</Button>
        (if using google authentication provider use signIn("google") after setup)
        - <Button onClick={() => signOut()}>Logout</Button>
        - Optional: pass an object into the signOut(): 
            signOut({redirect: "/", callback: () => console.log("Logged Out!")});
    9. For pages that require current session data:
        - import {useSession} from "next-auth/react"
        - const someTsxPage = () => {
            const {data: session} = useSession()
            if (session) {
                return (
                    <>
                        <p>Welcome {session?.user?.name}</p>
                        <button onClick={() => signOut()}>Sign out</button>
                    </>
                )
            }
        }
        - import {getServerSession}
        - const alternateSomeTsxPage = async () => {
            const session = await getServerSession()
            if (session) {
                return (
                    <>
                        <p>Welcome {session?.user?.name}</p>
                        <button onClick={() => signOut()}>Sign out</button>
                    </>
                )
            }
        }
    10. For routes that require user in session (protected for logged in users only):
        - import {useSession} from "next-auth/react"
        - import {redirect} from "next/navigation"
        - const someTsxPage = async () => {
            const session = await getServerSession()
            if (!session || !session.user) {
                redirect("api/auth/signin")
            }
            return (
                <>
                    <p>Welcome {session.user.name}</p>
                </>
            )
        }


Prisma:
An ORM - Object Relational Mapping tool. Interacts with databases in a clean and straightforward way. No SQL required.
Uses modals. Requires creating the database schema: includes defining tables, fields, data types and relations.
Can automatically generates code based on your database.
RUN MIGRATION = executable task that looks at created models and creates tables in the db.
PARTS:
    1. Prisma Client: Auto-generated and type-safe query builder.
    2. Prisma Migrate: Declarative data modeling and migration system.
    3. Prisma Studio: GUI (Browser) to view and edit data.
SETUP:
    1. Run `npm install prisma`.
    2. Run `npx prisma init --datasource-provider postresql`:
        - Creates 'prisma' directory.
        - Generates a 'schema.prisma' file inside 'prisma' (contains data model and datasource config).
        - Sets up a basic config with ProstreSQL as the datasource.
    3. Fill in the database schema: In 'schema.prisma' update the url in the 'datasource' with your PostreSQL connection string. Example:
        datasource db {
            provider = "postgresql"
            url      = env("DATABASE_URL") <- Create this field in .env file
        }
        generator client {
            provider = "prisma-client-js"
        }
        model User {
            id    Int     @id @default(autoincrement())
            name  String
            email String  @unique
        }
    4. Generate Prisma Client for interacting with the database using typescript: Run `npx prisma generate`.
    5. Run Migrations for creating the corresponding tables (as defined in schema.prisma) in the database: Run `npx prisma migrate dev --name init`


PostgreSQL:
A powerful, open-source relational database management system. Used for web and business applications.
Difference between Postres and MySQL:
- Postres has easier, more liberal licensing (more free).
- Postres has more reliable transaction management (ACID Complience).
- Postres can handle more advanced SQL features and extensions.
- Postres is better at handling large databases.
- MySQL is simpler, faster and more reliable for read-heavy (CRUD) applications.
- MySQL is easier to learn, the go-to for simple projects.


Supabase:
Open-source backend-as-a-service (BaaS) platform.
Provides: managing tools for PostreSQL databases, user management and access-control, real-time update support, file storage for images, videos and documents, auto-generated RESTful API, admin dashboard for the database, authentication, storage and API.
1. Set up authentication with Supabase and Prisma:
In prisma/schema.prisma:
    model User {
    id        Int      @id @default(autoincrement())
    email     String   @unique
    password  String
    name      String?
    }
2. Use Supabase Auth for login and sign-up processes. Once authenticated, use Prisma to handle user data:
    import { createClient } from '@supabase/supabase-js'
    import { PrismaClient } from '@prisma/client'
    const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)
    const prisma = new PrismaClient()
    async function signUp(email, password) {
    const { user, error } = await supabase.auth.signUp({ email, password })
    if (error) throw error
    // Create user in PostgreSQL using Prisma
    return await prisma.user.create({
        data: { email, password },
    });
    }
    async function signIn(email, password) {
    const { user, error } = await supabase.auth.signIn({ email, password })
    if (error) throw error
    // Fetch user data using Prisma
    return await prisma.user.findUnique({
        where: { email },
    });
    }
3. Handle real-time data sync: Subscribe to table changes + Perform the CRUD operations and rely on Supabase for real-time updates:
    import { createClient } from '@supabase/supabase-js';
    import { PrismaClient } from '@prisma/client';

    const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
    const prisma = new PrismaClient();

    supabase
    .from('posts')
    .on('INSERT', payload => {
        console.log('New post!', payload);
    })
    .subscribe();

    async function createPost(title, content) {
    return await prisma.post.create({
        data: { title, content },
    });
    }
4. Upload files + store file references in the database:
    import { createClient } from '@supabase/supabase-js';
    import { PrismaClient } from '@prisma/client';

    const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
    const prisma = new PrismaClient();

    async function uploadFile(file) {
    const { data, error } = await supabase.storage
        .from('uploads')
        .upload(`public/${file.name}`, file);

    if (error) throw error;

    // Save file reference in PostgreSQL
    return await prisma.file.create({
        data: {
        name: file.name,
        url: data.Key,
        },
    });
    }

_________________________________


Next JS Components: (To be imported from '/next')
1. Link: 
    - import Link from "next/link"
    - <Link href='/'>
2. Image:
    - import Image from "next/image"
    - <Image src='/logo.svg' alt="logo" height={30} width={30}></Image>

    
    
    
 

